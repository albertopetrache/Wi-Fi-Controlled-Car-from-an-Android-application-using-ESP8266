
Masinuta_Wi-Fi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  00000f08  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008001c8  008001c8  00001064  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f5  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8d  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f3  00000000  00000000  000041a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a41  00000000  00000000  0000489b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c4       	rjmp	.+2120   	; 0x892 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	bf c3       	rjmp	.+1918   	; 0x7d0 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e4 c3       	rjmp	.+1992   	; 0x84a <__vector_32>
  82:	00 00       	nop
  84:	f4 c3       	rjmp	.+2024   	; 0x86e <__vector_33>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 3c       	cpi	r26, 0xC8	; 200
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 ec       	ldi	r26, 0xC8	; 200
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2b d5       	rcall	.+2646   	; 0xb1a <main>
  c4:	1f c7       	rjmp	.+3646   	; 0xf04 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Comanda_LCD>:
static int sem_dr=0;


void Comanda_LCD(unsigned char comanda)
{
	LCD_port = (LCD_port & 0x0F) | (comanda & 0xF0); // se trimit cei mai semnificativi 4 biti
  c8:	92 b1       	in	r25, 0x02	; 2
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	28 2f       	mov	r18, r24
  ce:	20 7f       	andi	r18, 0xF0	; 240
  d0:	92 2b       	or	r25, r18
  d2:	92 b9       	out	0x02, r25	; 2
	LCD_port &= ~ (1<<RS);							 // setam RS la 0 pentru transmiterea comenzii
  d4:	92 b1       	in	r25, 0x02	; 2
  d6:	9e 7f       	andi	r25, 0xFE	; 254
  d8:	92 b9       	out	0x02, r25	; 2
	LCD_port |= (1<<EN);							 // se activeaza pinul EN
  da:	92 b1       	in	r25, 0x02	; 2
  dc:	92 60       	ori	r25, 0x02	; 2
  de:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	35 e0       	ldi	r19, 0x05	; 5
  e2:	3a 95       	dec	r19
  e4:	f1 f7       	brne	.-4      	; 0xe2 <Comanda_LCD+0x1a>
	_delay_us(1);
	LCD_port &= ~ (1<<EN);							 // se dezactiveaza pinul EN
  e6:	92 b1       	in	r25, 0x02	; 2
  e8:	9d 7f       	andi	r25, 0xFD	; 253
  ea:	92 b9       	out	0x02, r25	; 2
  ec:	e1 ee       	ldi	r30, 0xE1	; 225
  ee:	f2 e0       	ldi	r31, 0x02	; 2
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <Comanda_LCD+0x28>
  f4:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (comanda << 4);   // se trimit cei mai putin semnificativi 4 biti
  f6:	22 b1       	in	r18, 0x02	; 2
  f8:	f0 e1       	ldi	r31, 0x10	; 16
  fa:	8f 9f       	mul	r24, r31
  fc:	c0 01       	movw	r24, r0
  fe:	11 24       	eor	r1, r1
 100:	92 2f       	mov	r25, r18
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	89 2b       	or	r24, r25
 106:	82 b9       	out	0x02, r24	; 2
	LCD_port |= (1<<EN);							 // se activeaza pinul EN
 108:	82 b1       	in	r24, 0x02	; 2
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	82 b9       	out	0x02, r24	; 2
 10e:	35 e0       	ldi	r19, 0x05	; 5
 110:	3a 95       	dec	r19
 112:	f1 f7       	brne	.-4      	; 0x110 <Comanda_LCD+0x48>
	_delay_us(1);
	LCD_port &= ~ (1<<EN);							 // se dezactiveaza pinul EN
 114:	82 b1       	in	r24, 0x02	; 2
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8c ec       	ldi	r24, 0xCC	; 204
 11c:	9c e1       	ldi	r25, 0x1C	; 28
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Comanda_LCD+0x56>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Comanda_LCD+0x5c>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <LCD_send_char>:
	_delay_ms(2);
}

void LCD_send_char(unsigned char data)
{
	LCD_port = (LCD_port & 0x0F) | (data & 0xF0);	// se trimit cei mai semnificativi 4 biti
 128:	92 b1       	in	r25, 0x02	; 2
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	28 2f       	mov	r18, r24
 12e:	20 7f       	andi	r18, 0xF0	; 240
 130:	92 2b       	or	r25, r18
 132:	92 b9       	out	0x02, r25	; 2
	LCD_port |= (1<<RS);							// setam pinul RS la 1 pentru a indica ca transmitem date
 134:	92 b1       	in	r25, 0x02	; 2
 136:	91 60       	ori	r25, 0x01	; 1
 138:	92 b9       	out	0x02, r25	; 2
	LCD_port |= (1<<EN);							// se activeaza pinul EN
 13a:	92 b1       	in	r25, 0x02	; 2
 13c:	92 60       	ori	r25, 0x02	; 2
 13e:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	35 e0       	ldi	r19, 0x05	; 5
 142:	3a 95       	dec	r19
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_send_char+0x1a>
	_delay_us(1);
	LCD_port &= ~ (1<<EN);							// se dezactiveaza pinul EN
 146:	92 b1       	in	r25, 0x02	; 2
 148:	9d 7f       	andi	r25, 0xFD	; 253
 14a:	92 b9       	out	0x02, r25	; 2
 14c:	e1 ee       	ldi	r30, 0xE1	; 225
 14e:	f2 e0       	ldi	r31, 0x02	; 2
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_send_char+0x28>
 154:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (data << 4);		// se transmit cei mai putin semnificativi 4 biti
 156:	22 b1       	in	r18, 0x02	; 2
 158:	f0 e1       	ldi	r31, 0x10	; 16
 15a:	8f 9f       	mul	r24, r31
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	92 2f       	mov	r25, r18
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	89 2b       	or	r24, r25
 166:	82 b9       	out	0x02, r24	; 2
	LCD_port |= (1<<EN);							// se activeaza pinul EN
 168:	82 b1       	in	r24, 0x02	; 2
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	82 b9       	out	0x02, r24	; 2
 16e:	35 e0       	ldi	r19, 0x05	; 5
 170:	3a 95       	dec	r19
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_send_char+0x48>
	_delay_us(1);
	LCD_port &= ~ (1<<EN);							// se dezactiveaza pinul EN
 174:	82 b1       	in	r24, 0x02	; 2
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8c ec       	ldi	r24, 0xCC	; 204
 17c:	9c e1       	ldi	r25, 0x1C	; 28
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_send_char+0x56>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_send_char+0x5c>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <LCD_send_string>:
	_delay_ms(2);
}

void LCD_send_string (char *str)
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)			// se transmite sirul de caractere pana la intalnirea caracterului NULL
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <LCD_send_string+0x14>
	{
		LCD_send_char(str[i]);
 198:	c7 df       	rcall	.-114    	; 0x128 <LCD_send_char>
}

void LCD_send_string (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)			// se transmite sirul de caractere pana la intalnirea caracterului NULL
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	f8 01       	movw	r30, r16
 19e:	ec 0f       	add	r30, r28
 1a0:	fd 1f       	adc	r31, r29
 1a2:	80 81       	ld	r24, Z
 1a4:	81 11       	cpse	r24, r1
 1a6:	f8 cf       	rjmp	.-16     	; 0x198 <LCD_send_string+0x10>
	{
		LCD_send_char(str[i]);
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <initializare_LCD>:

void initializare_LCD (void)
{
	LCD_dir = 0xFF;					// seteaza ca port de iesire
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	81 b9       	out	0x01, r24	; 1
 1b6:	26 e6       	ldi	r18, 0x66	; 102
 1b8:	86 ee       	ldi	r24, 0xE6	; 230
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <initializare_LCD+0xa>
	_delay_ms(20);
	
	Comanda_LCD(0x02);				// trecere la modul de 4 biti (datele sunt transmise pe 4 linii de date, D4-7)
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	80 df       	rcall	.-256    	; 0xc8 <Comanda_LCD>
	Comanda_LCD(0x28);              // initializare LCD in modul de 4 biti si afisare pe 2 linii
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	7e df       	rcall	.-260    	; 0xc8 <Comanda_LCD>
	Comanda_LCD(0x0c);              // ascunde cursorul si dezactiveaza efectul de blink
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	7c df       	rcall	.-264    	; 0xc8 <Comanda_LCD>
	Comanda_LCD(0x06);              // se seteaza modul de afisare pentru deplasare la dreapta
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	7a df       	rcall	.-268    	; 0xc8 <Comanda_LCD>
	Comanda_LCD(0x01);              // sterge ecranul
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	78 df       	rcall	.-272    	; 0xc8 <Comanda_LCD>
 1d8:	8c ec       	ldi	r24, 0xCC	; 204
 1da:	9c e1       	ldi	r25, 0x1C	; 28
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <initializare_LCD+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <initializare_LCD+0x30>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <LCD_Clear>:
 1e6:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(2);
}

void LCD_Clear()
{
	Comanda_LCD (0x01);		// sterge ecranul
 1e8:	6f df       	rcall	.-290    	; 0xc8 <Comanda_LCD>
 1ea:	8c ec       	ldi	r24, 0xCC	; 204
 1ec:	9c e1       	ldi	r25, 0x1C	; 28
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Clear+0x8>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Clear+0xe>
 1f4:	00 00       	nop
	_delay_ms(2);
	Comanda_LCD (0x80);		// se seteaza cursorul pe prima pozitie a primei linii
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	67 cf       	rjmp	.-306    	; 0xc8 <Comanda_LCD>
 1fa:	08 95       	ret

000001fc <timer0_init>:
void timer0_init()
{
	

	
	TCCR0B |= (1 << CS02); //se seteaza prescaler-ul la 256 => T = 16us
 1fc:	85 b5       	in	r24, 0x25	; 37
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
 202:	ee e6       	ldi	r30, 0x6E	; 110
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
 20c:	08 95       	ret

0000020e <timer1_init>:
}

void timer1_init()
{
	// Fast PWM pe 8 biti non-inverting cu top la 0x00FF, prescaler de 1, output atat pe canalul A cat si pe B
	TCCR1A |= (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 20e:	e0 e8       	ldi	r30, 0x80	; 128
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	81 6a       	ori	r24, 0xA1	; 161
 216:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);
 218:	e1 e8       	ldi	r30, 0x81	; 129
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	89 60       	ori	r24, 0x09	; 9
 220:	80 83       	st	Z, r24

	
	OCR1A = 0;
 222:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 226:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0;
 22a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 22e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 232:	08 95       	ret

00000234 <timer2_init>:
}

void timer2_init()
{
	// Fast PWM cu top la 0xFF, prescaler 128
	OCR2B = 255;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	TCCR2A |= (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 23a:	e0 eb       	ldi	r30, 0xB0	; 176
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	83 62       	ori	r24, 0x23	; 35
 242:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20);
 244:	e1 eb       	ldi	r30, 0xB1	; 177
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	85 60       	ori	r24, 0x05	; 5
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <timer3_init>:
}

void timer3_init()
{
	// FRECVENTA 2HZ, semnal si pe canalul A si pe canalul B pentru fiecare semnalizare
	ICR3 = 57599;
 250:	e6 e9       	ldi	r30, 0x96	; 150
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	90 ee       	ldi	r25, 0xE0	; 224
 258:	91 83       	std	Z+1, r25	; 0x01
 25a:	80 83       	st	Z, r24
	OCR3A = ICR3 + 1;
 25c:	80 81       	ld	r24, Z
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 266:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = ICR3 + 1;
 26a:	80 81       	ld	r24, Z
 26c:	91 81       	ldd	r25, Z+1	; 0x01
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 274:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	// CTC cu top la ICR1, prescaler 64
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS32);
 278:	e1 e9       	ldi	r30, 0x91	; 145
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8c 61       	ori	r24, 0x1C	; 28
 280:	80 83       	st	Z, r24
	// enable la intreruperi
	TIMSK3 |= (1 << OCIE3B) | (1 << OCIE3A);
 282:	e1 e7       	ldi	r30, 0x71	; 113
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	86 60       	ori	r24, 0x06	; 6
 28a:	80 83       	st	Z, r24
 28c:	08 95       	ret

0000028e <USART0_init>:
}

void USART0_init()
{
	//setam baud rate-ul
	UBRR0=7;
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 296:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 29a:	88 e9       	ldi	r24, 0x98	; 152
 29c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2a6:	08 95       	ret

000002a8 <USART0_transmit>:


void USART0_transmit(char data)
{
	// se asteapta pana cand buffer-ul e gol
	while(!(UCSR0A & (1<<UDRE0)));
 2a8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2ac:	95 ff       	sbrs	r25, 5
 2ae:	fc cf       	rjmp	.-8      	; 0x2a8 <USART0_transmit>

	// se pun datele in buffer, transmisia pornind automat in urma scrierii
	UDR0 = data;
 2b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b4:	08 95       	ret

000002b6 <USART0_print>:
}

//Functie pentru transmiterea unui sir de caractere prin USART
void USART0_print(const char *data)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
	while(*data != '\0')
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <USART0_print+0xc>
	USART0_transmit(*data++);
 2be:	21 96       	adiw	r28, 0x01	; 1
 2c0:	f3 df       	rcall	.-26     	; 0x2a8 <USART0_transmit>
}

//Functie pentru transmiterea unui sir de caractere prin USART
void USART0_print(const char *data)
{
	while(*data != '\0')
 2c2:	88 81       	ld	r24, Y
 2c4:	81 11       	cpse	r24, r1
 2c6:	fb cf       	rjmp	.-10     	; 0x2be <USART0_print+0x8>
	USART0_transmit(*data++);
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <executare_comanda>:


void executare_comanda()
{
	cli();
 2ce:	f8 94       	cli
	
	if(strstr(rx_buffer,"inainte")){
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	88 ed       	ldi	r24, 0xD8	; 216
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	fb d5       	rcall	.+3062   	; 0xed0 <strstr>
 2da:	89 2b       	or	r24, r25
 2dc:	d9 f0       	breq	.+54     	; 0x314 <executare_comanda+0x46>
		
		LCD_Clear();
 2de:	83 df       	rcall	.-250    	; 0x1e6 <LCD_Clear>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
		LCD_send_string("inainte");
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	51 df       	rcall	.-350    	; 0x188 <LCD_send_string>
 2e6:	85 b1       	in	r24, 0x05	; 5
		PORTB &= ~(1 << PB0);
 2e8:	8e 7f       	andi	r24, 0xFE	; 254
 2ea:	85 b9       	out	0x05, r24	; 5
 2ec:	85 b1       	in	r24, 0x05	; 5
		PORTB &= ~(1 << PB1);
 2ee:	8d 7f       	andi	r24, 0xFD	; 253
 2f0:	85 b9       	out	0x05, r24	; 5
 2f2:	87 e9       	ldi	r24, 0x97	; 151
		OCR1A=151;
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		OCR1B=151;
 302:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 306:	81 e0       	ldi	r24, 0x01	; 1
		inainte=1;
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <inainte+0x1>
 30e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <inainte>
 312:	5c c2       	rjmp	.+1208   	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
		goto finish;
 314:	6a e0       	ldi	r22, 0x0A	; 10
		
	}
	
	else if(strstr(rx_buffer,"inapoi")){
 316:	71 e0       	ldi	r23, 0x01	; 1
 318:	88 ed       	ldi	r24, 0xD8	; 216
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	d9 d5       	rcall	.+2994   	; 0xed0 <strstr>
 31e:	89 2b       	or	r24, r25
 320:	d9 f0       	breq	.+54     	; 0x358 <executare_comanda+0x8a>
		
		LCD_Clear();
 322:	61 df       	rcall	.-318    	; 0x1e6 <LCD_Clear>
 324:	8a e0       	ldi	r24, 0x0A	; 10
		LCD_send_string("inapoi");
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	2f df       	rcall	.-418    	; 0x188 <LCD_send_string>
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	81 60       	ori	r24, 0x01	; 1
		PORTB |= 1 << PB0;
 32e:	85 b9       	out	0x05, r24	; 5
 330:	85 b1       	in	r24, 0x05	; 5
 332:	82 60       	ori	r24, 0x02	; 2
		PORTB |= 1 << PB1;
 334:	85 b9       	out	0x05, r24	; 5
 336:	87 e9       	ldi	r24, 0x97	; 151
 338:	90 e0       	ldi	r25, 0x00	; 0
		OCR1A=151;
 33a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 33e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 342:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		OCR1B=151;
 346:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
		inapoi=1;
 34e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <inapoi+0x1>
 352:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <inapoi>
 356:	3a c2       	rjmp	.+1140   	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
		
		goto finish;
 358:	61 e1       	ldi	r22, 0x11	; 17
		
	}
	
	
	else if(strstr(rx_buffer,"frana")){
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	88 ed       	ldi	r24, 0xD8	; 216
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	b7 d5       	rcall	.+2926   	; 0xed0 <strstr>
 362:	89 2b       	or	r24, r25
 364:	f9 f0       	breq	.+62     	; 0x3a4 <executare_comanda+0xd6>
		LCD_Clear();
 366:	3f df       	rcall	.-386    	; 0x1e6 <LCD_Clear>
 368:	81 e1       	ldi	r24, 0x11	; 17
		LCD_send_string("frana");
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0d df       	rcall	.-486    	; 0x188 <LCD_send_string>
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	8e 7f       	andi	r24, 0xFE	; 254
		PORTB &= ~(1 << PB0);
 372:	85 b9       	out	0x05, r24	; 5
 374:	85 b1       	in	r24, 0x05	; 5
 376:	8d 7f       	andi	r24, 0xFD	; 253
		PORTB &= ~(1 << PB1);
 378:	85 b9       	out	0x05, r24	; 5
 37a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1A=0;
 37e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 382:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		OCR1B=0;
 386:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 38a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <inapoi+0x1>
		inapoi=0;
 38e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <inapoi>
 392:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <inainte+0x1>
		inainte=0;
 396:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <inainte>
 39a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <drifting+0x1>
		drifting=0;
 39e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <drifting>
 3a2:	14 c2       	rjmp	.+1064   	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
		goto finish;
		
	}
	
	
	else if (strstr(rx_buffer, "stanga")) {
 3a4:	67 e1       	ldi	r22, 0x17	; 23
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	88 ed       	ldi	r24, 0xD8	; 216
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	91 d5       	rcall	.+2850   	; 0xed0 <strstr>
 3ae:	89 2b       	or	r24, r25
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <executare_comanda+0xe6>
 3b2:	46 c0       	rjmp	.+140    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		LCD_Clear();
 3b4:	18 df       	rcall	.-464    	; 0x1e6 <LCD_Clear>
 3b6:	87 e1       	ldi	r24, 0x17	; 23
		LCD_send_string("stanga");
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	e6 de       	rcall	.-564    	; 0x188 <LCD_send_string>
 3bc:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <inainte>
		// daca masina nu se afla in miscare, nu fac nimic
		if (inainte == 0 && inapoi==0)
 3c0:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <inainte+0x1>
 3c4:	89 2b       	or	r24, r25
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <executare_comanda+0x108>
 3c8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <inapoi>
 3cc:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <inapoi+0x1>
 3d0:	89 2b       	or	r24, r25
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <executare_comanda+0x108>
 3d4:	fb c1       	rjmp	.+1014   	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 3d6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <drifting>
		goto finish;
		// incep virajul, salvez vechea valoare la OCR-ului si directia in care se face virajul
		if (drifting == 0)
 3da:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <drifting+0x1>
 3de:	89 2b       	or	r24, r25
 3e0:	a9 f4       	brne	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	ea e8       	ldi	r30, 0x8A	; 138
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			
			saved = OCR1B;
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <saved+0x1>
 3ee:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <saved>
 3f2:	11 82       	std	Z+1, r1	; 0x01
 3f4:	10 82       	st	Z, r1
			OCR1B = 0;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
			drifting = 1;
 3fa:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <drifting+0x1>
 3fe:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <drifting>
 402:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			direction = 0;
 406:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 40a:	e0 c1       	rjmp	.+960    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 40c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			
		}
		else
		{
			// daca virajul nu a fost inceput in aceasta directie, nu fac nimic
			if (direction != 0)
 410:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 414:	89 2b       	or	r24, r25
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	d9 c1       	rjmp	.+946    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 41a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <saved>
			goto finish;
			// opresc virajul, refac valoarea OCR-ului
			OCR1B = saved;
 41e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <saved+0x1>
 422:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 426:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 42a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <drifting+0x1>
			drifting = 0;
 42e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <drifting>
 432:	8f ef       	ldi	r24, 0xFF	; 255
			direction = -1;
 434:	9f ef       	ldi	r25, 0xFF	; 255
 436:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 43a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	c6 c1       	rjmp	.+908    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
		}
		
	}
	
	
	else if (strstr(rx_buffer, "dreapta")) {
 440:	6e e1       	ldi	r22, 0x1E	; 30
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	88 ed       	ldi	r24, 0xD8	; 216
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	43 d5       	rcall	.+2694   	; 0xed0 <strstr>
 44a:	89 2b       	or	r24, r25
 44c:	09 f4       	brne	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	46 c0       	rjmp	.+140    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 450:	ca de       	rcall	.-620    	; 0x1e6 <LCD_Clear>
		
		LCD_Clear();
 452:	8e e1       	ldi	r24, 0x1E	; 30
 454:	91 e0       	ldi	r25, 0x01	; 1
		LCD_send_string("dreapta");
 456:	98 de       	rcall	.-720    	; 0x188 <LCD_send_string>
 458:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <inainte>
 45c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <inainte+0x1>
		// analog ca mai sus, doar ca pe dos
		if (inainte == 0 && inapoi == 0)
 460:	89 2b       	or	r24, r25
 462:	39 f4       	brne	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 464:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <inapoi>
 468:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <inapoi+0x1>
 46c:	89 2b       	or	r24, r25
 46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	ad c1       	rjmp	.+858    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 472:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <drifting>
 476:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <drifting+0x1>
		goto finish;
		if (drifting == 0)
 47a:	89 2b       	or	r24, r25
 47c:	a9 f4       	brne	.+42     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 47e:	e8 e8       	ldi	r30, 0x88	; 136
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
		{
			
			saved = OCR1A;
 484:	91 81       	ldd	r25, Z+1	; 0x01
 486:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <saved+0x1>
 48a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <saved>
 48e:	11 82       	std	Z+1, r1	; 0x01
 490:	10 82       	st	Z, r1
 492:	81 e0       	ldi	r24, 0x01	; 1
			OCR1A = 0;
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <drifting+0x1>
			drifting = 1;
 49a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <drifting>
 49e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			direction = 1	;
 4a6:	92 c1       	rjmp	.+804    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 4a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			
		}
		else {
			if (direction != 1)
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	8b c1       	rjmp	.+790    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 4b6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <saved>
 4ba:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <saved+0x1>
			goto finish;
			OCR1A = saved;
 4be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4c6:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <drifting+0x1>
 4ca:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <drifting>
			drifting = 0;
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
			direction = -1;
 4d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4da:	78 c1       	rjmp	.+752    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 4dc:	66 e2       	ldi	r22, 0x26	; 38
		}
	}
	
	else if (strstr(rx_buffer, "speedup")) {
 4de:	71 e0       	ldi	r23, 0x01	; 1
 4e0:	88 ed       	ldi	r24, 0xD8	; 216
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	f5 d4       	rcall	.+2538   	; 0xed0 <strstr>
 4e6:	89 2b       	or	r24, r25
 4e8:	79 f1       	breq	.+94     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4ea:	7d de       	rcall	.-774    	; 0x1e6 <LCD_Clear>
 4ec:	86 e2       	ldi	r24, 0x26	; 38
		
		LCD_Clear();
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	4b de       	rcall	.-874    	; 0x188 <LCD_send_string>
		LCD_send_string("speedup");
 4f2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4f6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		if(OCR1A == 255 && OCR1B == 255)
 4fa:	8f 3f       	cpi	r24, 0xFF	; 255
 4fc:	91 05       	cpc	r25, r1
 4fe:	41 f4       	brne	.+16     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 500:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 504:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 508:	8f 3f       	cpi	r24, 0xFF	; 255
 50a:	91 05       	cpc	r25, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50e:	5e c1       	rjmp	.+700    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 510:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <inainte>
 514:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <inainte+0x1>
		goto finish;
		if(inainte == 1 || inapoi == 1)
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	39 f0       	breq	.+14     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 51c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <inapoi>
 520:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <inapoi+0x1>
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	09 f0       	breq	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 528:	51 c1       	rjmp	.+674    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 52a:	e8 e8       	ldi	r30, 0x88	; 136
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	91 81       	ldd	r25, Z+1	; 0x01
		{
			OCR1A = OCR1A + 26;
 532:	4a 96       	adiw	r24, 0x1a	; 26
 534:	91 83       	std	Z+1, r25	; 0x01
 536:	80 83       	st	Z, r24
 538:	ea e8       	ldi	r30, 0x8A	; 138
 53a:	f0 e0       	ldi	r31, 0x00	; 0
			OCR1B = OCR1B + 26;
 53c:	80 81       	ld	r24, Z
 53e:	91 81       	ldd	r25, Z+1	; 0x01
 540:	4a 96       	adiw	r24, 0x1a	; 26
 542:	91 83       	std	Z+1, r25	; 0x01
 544:	80 83       	st	Z, r24
 546:	42 c1       	rjmp	.+644    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 548:	6e e2       	ldi	r22, 0x2E	; 46
		}
		
		
	}
	else if (strstr(rx_buffer, "slowdown")) {
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	88 ed       	ldi	r24, 0xD8	; 216
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	bf d4       	rcall	.+2430   	; 0xed0 <strstr>
 552:	89 2b       	or	r24, r25
 554:	79 f1       	breq	.+94     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 556:	47 de       	rcall	.-882    	; 0x1e6 <LCD_Clear>
 558:	8e e2       	ldi	r24, 0x2E	; 46
		
		LCD_Clear();
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	15 de       	rcall	.-982    	; 0x188 <LCD_send_string>
		LCD_send_string("slowdown");
 55e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 562:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		if(OCR1A == 151 && OCR1B == 151)
 566:	87 39       	cpi	r24, 0x97	; 151
 568:	91 05       	cpc	r25, r1
 56a:	41 f4       	brne	.+16     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 56c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 570:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 574:	87 39       	cpi	r24, 0x97	; 151
 576:	91 05       	cpc	r25, r1
 578:	09 f4       	brne	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57a:	28 c1       	rjmp	.+592    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 57c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <inainte>
 580:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <inainte+0x1>
		goto finish;
		if(inainte == 1 || inapoi == 1)
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	39 f0       	breq	.+14     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 588:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <inapoi>
 58c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <inapoi+0x1>
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	09 f0       	breq	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 594:	1b c1       	rjmp	.+566    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 596:	e8 e8       	ldi	r30, 0x88	; 136
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
		{
			OCR1A = OCR1A - 26;
 59c:	91 81       	ldd	r25, Z+1	; 0x01
 59e:	4a 97       	sbiw	r24, 0x1a	; 26
 5a0:	91 83       	std	Z+1, r25	; 0x01
 5a2:	80 83       	st	Z, r24
 5a4:	ea e8       	ldi	r30, 0x8A	; 138
			OCR1B = OCR1B - 26;
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	4a 97       	sbiw	r24, 0x1a	; 26
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	80 83       	st	Z, r24
 5b2:	0c c1       	rjmp	.+536    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
			
		}
		
		
	}
	else if(strstr(rx_buffer,"faruri")){
 5b4:	67 e3       	ldi	r22, 0x37	; 55
 5b6:	71 e0       	ldi	r23, 0x01	; 1
 5b8:	88 ed       	ldi	r24, 0xD8	; 216
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	89 d4       	rcall	.+2322   	; 0xed0 <strstr>
 5be:	89 2b       	or	r24, r25
		
		LCD_Clear();
 5c0:	49 f0       	breq	.+18     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c2:	11 de       	rcall	.-990    	; 0x1e6 <LCD_Clear>
		LCD_send_string("faruri");
 5c4:	87 e3       	ldi	r24, 0x37	; 55
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	df dd       	rcall	.-1090   	; 0x188 <LCD_send_string>
 5ca:	98 b1       	in	r25, 0x08	; 8
		PORTC ^= (1 << PC0);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	89 27       	eor	r24, r25
 5d0:	88 b9       	out	0x08, r24	; 8
 5d2:	fc c0       	rjmp	.+504    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 5d4:	6e e3       	ldi	r22, 0x3E	; 62
	}
	
	else if(strstr(rx_buffer,"avarii"))
 5d6:	71 e0       	ldi	r23, 0x01	; 1
 5d8:	88 ed       	ldi	r24, 0xD8	; 216
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	79 d4       	rcall	.+2290   	; 0xed0 <strstr>
 5de:	89 2b       	or	r24, r25
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e2:	49 c0       	rjmp	.+146    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 5e4:	00 de       	rcall	.-1024   	; 0x1e6 <LCD_Clear>
 5e6:	8e e3       	ldi	r24, 0x3E	; 62
	{
		
		LCD_Clear();
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	ce dd       	rcall	.-1124   	; 0x188 <LCD_send_string>
		LCD_send_string("avarii");
 5ec:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <avarii>
 5f0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <avarii+0x1>
		//daca avariile sunt oprite
		if (avarii == 0)
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	e9 f4       	brne	.+58     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <avarii+0x1>
		{
			
			avarii=1;
 600:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <avarii>
 604:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 608:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
			TCNT3 = 0;
 60c:	e6 e9       	ldi	r30, 0x96	; 150
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
			OCR3A = ICR3 / 2;
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 61c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 620:	80 81       	ld	r24, Z
 622:	91 81       	ldd	r25, Z+1	; 0x01
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
			OCR3B = ICR3 / 2;
 628:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 62c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 630:	cd c0       	rjmp	.+410    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	09 f0       	breq	.+2      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 636:	ca c0       	rjmp	.+404    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 638:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
			
		}
		else if (avarii == 1)
 63c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		{
			
			TCNT3 = 0;
 640:	e6 e9       	ldi	r30, 0x96	; 150
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	91 81       	ldd	r25, Z+1	; 0x01
			OCR3A = ICR3 + 1;
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 64e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 652:	80 81       	ld	r24, Z
 654:	91 81       	ldd	r25, Z+1	; 0x01
 656:	01 96       	adiw	r24, 0x01	; 1
			OCR3B = ICR3 + 1;
 658:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 65c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 660:	8b b1       	in	r24, 0x0b	; 11
 662:	8b 7f       	andi	r24, 0xFB	; 251
			PORTD &= ~(1 << PD2);
 664:	8b b9       	out	0x0b, r24	; 11
 666:	8b b1       	in	r24, 0x0b	; 11
 668:	87 7f       	andi	r24, 0xF7	; 247
			PORTD &= ~(1 << PD3);
 66a:	8b b9       	out	0x0b, r24	; 11
 66c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <avarii+0x1>
			avarii=0;
 670:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <avarii>
 674:	ab c0       	rjmp	.+342    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 676:	65 e4       	ldi	r22, 0x45	; 69
 678:	71 e0       	ldi	r23, 0x01	; 1
		}
		
		
	}
	
	else if(strstr(rx_buffer,"sem_dr")){
 67a:	88 ed       	ldi	r24, 0xD8	; 216
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	28 d4       	rcall	.+2128   	; 0xed0 <strstr>
 680:	89 2b       	or	r24, r25
 682:	09 f4       	brne	.+2      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 684:	45 c0       	rjmp	.+138    	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 686:	af dd       	rcall	.-1186   	; 0x1e6 <LCD_Clear>
 688:	85 e4       	ldi	r24, 0x45	; 69
 68a:	91 e0       	ldi	r25, 0x01	; 1
		LCD_Clear();
 68c:	7d dd       	rcall	.-1286   	; 0x188 <LCD_send_string>
 68e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <avarii>
		LCD_send_string("sem_dr");
 692:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <avarii+0x1>
 696:	01 97       	sbiw	r24, 0x01	; 1
		if (avarii == 1)
 698:	09 f4       	brne	.+2      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 69a:	98 c0       	rjmp	.+304    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 69c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <sem_st>
 6a0:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <sem_st+0x1>
 6a4:	89 2b       	or	r24, r25
		goto finish;
		// daca semnalizarea era oprita
		if (sem_st == 0)
 6a6:	e1 f4       	brne	.+56     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6a8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 6ac:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 6b0:	e6 e9       	ldi	r30, 0x96	; 150
		{
			TCNT3 = 0;
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	01 96       	adiw	r24, 0x01	; 1
			// opresc semnalizarea stanga
			OCR3B = ICR3 + 1;
 6ba:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 6be:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 6c2:	80 81       	ld	r24, Z
 6c4:	91 81       	ldd	r25, Z+1	; 0x01
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
			// pornesc semnalizarea dreapta
			OCR3A = ICR3 / 2;
 6ce:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <sem_st+0x1>
 6da:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <sem_st>
			sem_st=1;
 6de:	76 c0       	rjmp	.+236    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 6e0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 6e4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		}
		else
		{
			// altfel opresc semnalizarea
			TCNT3 = 0;
 6e8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 6ec:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
			OCR3A = ICR3 + 1;
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 6f6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 6fa:	8b b1       	in	r24, 0x0b	; 11
 6fc:	8b 7f       	andi	r24, 0xFB	; 251
			PORTD &= ~(1 << PD2);
 6fe:	8b b9       	out	0x0b, r24	; 11
 700:	8b b1       	in	r24, 0x0b	; 11
 702:	87 7f       	andi	r24, 0xF7	; 247
			PORTD &= ~(1 << PD3);
 704:	8b b9       	out	0x0b, r24	; 11
 706:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <sem_st+0x1>
			sem_st=0;
 70a:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <sem_st>
 70e:	5e c0       	rjmp	.+188    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 710:	6c e4       	ldi	r22, 0x4C	; 76
 712:	71 e0       	ldi	r23, 0x01	; 1
		
	}
	
	
	
	else if (strstr(rx_buffer, "sem_st")) {
 714:	88 ed       	ldi	r24, 0xD8	; 216
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	db d3       	rcall	.+1974   	; 0xed0 <strstr>
 71a:	89 2b       	or	r24, r25
 71c:	09 f4       	brne	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71e:	45 c0       	rjmp	.+138    	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 720:	62 dd       	rcall	.-1340   	; 0x1e6 <LCD_Clear>
 722:	8c e4       	ldi	r24, 0x4C	; 76
 724:	91 e0       	ldi	r25, 0x01	; 1

		LCD_Clear();
 726:	30 dd       	rcall	.-1440   	; 0x188 <LCD_send_string>
 728:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <avarii>
		LCD_send_string("sem_st");
 72c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <avarii+0x1>
 730:	01 97       	sbiw	r24, 0x01	; 1
		if (avarii == 1)
 732:	09 f4       	brne	.+2      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 734:	4b c0       	rjmp	.+150    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 736:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 73a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0x1>
 73e:	89 2b       	or	r24, r25
		goto finish;
		// daca semnalizarea era oprita
		if (sem_dr == 0)
 740:	e1 f4       	brne	.+56     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 742:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 746:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 74a:	e6 e9       	ldi	r30, 0x96	; 150
		{
			// opresc semnalizrea dreapta
			TCNT3 = 0;
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	01 96       	adiw	r24, 0x01	; 1
			OCR3A = ICR3 + 1;
 754:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 758:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
			// pornesc semnalizarea stanga
			OCR3B = ICR3 / 2;
 768:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__data_end+0x1>
 774:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
			sem_dr=1;
 778:	29 c0       	rjmp	.+82     	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 77a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 77e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		}
		else
		{
			// altfel opresc semnalizarea
			TCNT3 = 0;
 782:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
			OCR3B = ICR3 + 1;
 786:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 790:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 794:	8b b1       	in	r24, 0x0b	; 11
 796:	8b 7f       	andi	r24, 0xFB	; 251
			PORTD &= ~(1 << PD2);
 798:	8b b9       	out	0x0b, r24	; 11
 79a:	8b b1       	in	r24, 0x0b	; 11
 79c:	87 7f       	andi	r24, 0xF7	; 247
			PORTD &= ~(1 << PD3);
 79e:	8b b9       	out	0x0b, r24	; 11
 7a0:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <__data_end+0x1>
			sem_dr=0;
 7a4:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__data_end>
 7a8:	11 c0       	rjmp	.+34     	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 7aa:	63 e5       	ldi	r22, 0x53	; 83
 7ac:	71 e0       	ldi	r23, 0x01	; 1
		}
		
	}
	
	else if (strstr(rx_buffer, "claxon")) {
 7ae:	88 ed       	ldi	r24, 0xD8	; 216
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	8e d3       	rcall	.+1820   	; 0xed0 <strstr>
 7b4:	89 2b       	or	r24, r25
 7b6:	51 f0       	breq	.+20     	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 7b8:	16 dd       	rcall	.-1492   	; 0x1e6 <LCD_Clear>
 7ba:	83 e5       	ldi	r24, 0x53	; 83
 7bc:	91 e0       	ldi	r25, 0x01	; 1
		LCD_Clear();
 7be:	e4 dc       	rcall	.-1592   	; 0x188 <LCD_send_string>
 7c0:	e4 eb       	ldi	r30, 0xB4	; 180
		LCD_send_string("claxon");
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	90 81       	ld	r25, Z
 7c6:	8f e7       	ldi	r24, 0x7F	; 127
 7c8:	89 1b       	sub	r24, r25
		
		OCR2B = 255 + 128 - OCR2B;
 7ca:	80 83       	st	Z, r24
 7cc:	78 94       	sei
 7ce:	08 95       	ret

000007d0 <__vector_20>:
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
	}
	
	finish:
	sei();
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
}

ISR(USART0_RX_vect)
{
 7da:	0b b6       	in	r0, 0x3b	; 59
 7dc:	0f 92       	push	r0
 7de:	2f 93       	push	r18
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31
	
	received_byte = UDR0;
 7ec:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	// Retin caracterele primite de la modul, bufferul se goleste cand se fac citiri din el
	if (index_buffer < rx_size)
 7f0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <index_buffer>
 7f4:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <index_buffer+0x1>
 7f8:	82 33       	cpi	r24, 0x32	; 50
 7fa:	91 05       	cpc	r25, r1
 7fc:	5c f4       	brge	.+22     	; 0x814 <__vector_20+0x44>
	rx_buffer[index_buffer++] = received_byte;
 7fe:	ac 01       	movw	r20, r24
 800:	4f 5f       	subi	r20, 0xFF	; 255
 802:	5f 4f       	sbci	r21, 0xFF	; 255
 804:	50 93 d7 01 	sts	0x01D7, r21	; 0x8001d7 <index_buffer+0x1>
 808:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <index_buffer>
 80c:	fc 01       	movw	r30, r24
 80e:	e8 52       	subi	r30, 0x28	; 40
 810:	fe 4f       	sbci	r31, 0xFE	; 254
 812:	20 83       	st	Z, r18
	
	rx_buffer[index_buffer] = '\0';
 814:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <index_buffer>
 818:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <index_buffer+0x1>
 81c:	e8 52       	subi	r30, 0x28	; 40
 81e:	fe 4f       	sbci	r31, 0xFE	; 254
 820:	10 82       	st	Z, r1

	// Setez alerta de receive
	date_primite = 1;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <date_primite+0x1>
 82a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <date_primite>
	
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	5f 91       	pop	r21
 838:	4f 91       	pop	r20
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0b be       	out	0x3b, r0	; 59
 840:	0f 90       	pop	r0
 842:	0f be       	out	0x3f, r0	; 63
 844:	0f 90       	pop	r0
 846:	1f 90       	pop	r1
 848:	18 95       	reti

0000084a <__vector_32>:

// toggle la semnalizarea dreapta
ISR(TIMER3_COMPA_vect) {
 84a:	1f 92       	push	r1
 84c:	0f 92       	push	r0
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	0f 92       	push	r0
 852:	11 24       	eor	r1, r1
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
	PORTD ^= (1 << PD2);
 858:	9b b1       	in	r25, 0x0b	; 11
 85a:	84 e0       	ldi	r24, 0x04	; 4
 85c:	89 27       	eor	r24, r25
 85e:	8b b9       	out	0x0b, r24	; 11
}
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_33>:

// toggle la semnalizarea stanga
ISR(TIMER3_COMPB_vect) {
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	8f 93       	push	r24
 87a:	9f 93       	push	r25
	PORTD ^= (1 << PD3);
 87c:	9b b1       	in	r25, 0x0b	; 11
 87e:	88 e0       	ldi	r24, 0x08	; 8
 880:	89 27       	eor	r24, r25
 882:	8b b9       	out	0x0b, r24	; 11
}
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_18>:


ISR(TIMER0_OVF_vect)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
	count++;
 8a0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <count>
 8a4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <count+0x1>
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <count+0x1>
 8ae:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <count>
}
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__vector_4>:

ISR(PCINT0_vect)
{
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	8f 93       	push	r24
 8cc:	9f 93       	push	r25
	if ((PINA & (1 << PA3)) != 0) {
 8ce:	03 9b       	sbis	0x00, 3	; 0
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <__vector_4+0x1e>
		TCNT0 = 0;
 8d2:	16 bc       	out	0x26, r1	; 38
		count = 0;
 8d4:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <count+0x1>
 8d8:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <count>
 8dc:	14 c0       	rjmp	.+40     	; 0x906 <__vector_4+0x46>
	}
	else {
		saved_tcnt0 = TCNT0;
 8de:	86 b5       	in	r24, 0x26	; 38
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <saved_tcnt0+0x1>
 8e6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <saved_tcnt0>
		saved_count = count;
 8ea:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <count>
 8ee:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <count+0x1>
 8f2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <saved_count+0x1>
 8f6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <saved_count>
		flag = 1;
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <flag+0x1>
 902:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <flag>
	}
}
 906:	9f 91       	pop	r25
 908:	8f 91       	pop	r24
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <initializare_HCSR04>:


void initializare_HCSR04()
{
	//Pini pentru Echo si Trigger
	DDRA |= (1 << PA2); // Trigger
 914:	81 b1       	in	r24, 0x01	; 1
 916:	84 60       	ori	r24, 0x04	; 4
 918:	81 b9       	out	0x01, r24	; 1
	DDRA &= ~(1 << PA3); // Echo
 91a:	81 b1       	in	r24, 0x01	; 1
 91c:	87 7f       	andi	r24, 0xF7	; 247
 91e:	81 b9       	out	0x01, r24	; 1

	PORTA &= ~(1 << PA2);
 920:	82 b1       	in	r24, 0x02	; 2
 922:	8b 7f       	andi	r24, 0xFB	; 251
 924:	82 b9       	out	0x02, r24	; 2
	
	//activare intrerupere de tip pin change pe pinul Echo PA3
	PCICR |= (1 << PCIE0);
 926:	e8 e6       	ldi	r30, 0x68	; 104
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3);
 930:	eb e6       	ldi	r30, 0x6B	; 107
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	88 60       	ori	r24, 0x08	; 8
 938:	80 83       	st	Z, r24
 93a:	08 95       	ret

0000093c <initializare_motoare>:
}

void initializare_motoare()
{
	DDRD |= (1 << PD4) | (1 << PD5);
 93c:	8a b1       	in	r24, 0x0a	; 10
 93e:	80 63       	ori	r24, 0x30	; 48
 940:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PB0) | (1 << PB1);
 942:	84 b1       	in	r24, 0x04	; 4
 944:	83 60       	ori	r24, 0x03	; 3
 946:	84 b9       	out	0x04, r24	; 4
 948:	08 95       	ret

0000094a <initializare_leduri>:
}

void initializare_leduri()
{
	DDRD |= (1 << PD2) | (1 << PD3); //semnalizari si avarii
 94a:	8a b1       	in	r24, 0x0a	; 10
 94c:	8c 60       	ori	r24, 0x0C	; 12
 94e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PD2);
 950:	8b b1       	in	r24, 0x0b	; 11
 952:	8b 7f       	andi	r24, 0xFB	; 251
 954:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD3);
 956:	8b b1       	in	r24, 0x0b	; 11
 958:	87 7f       	andi	r24, 0xF7	; 247
 95a:	8b b9       	out	0x0b, r24	; 11
	
	DDRC |= (1 << PC0);	//faruri
 95c:	87 b1       	in	r24, 0x07	; 7
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	87 b9       	out	0x07, r24	; 7
 962:	08 95       	ret

00000964 <initializare_buzzer>:
}

void initializare_buzzer()
{
	DDRD |= (1 << PD6);
 964:	8a b1       	in	r24, 0x0a	; 10
 966:	80 64       	ori	r24, 0x40	; 64
 968:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD6);
 96a:	8b b1       	in	r24, 0x0b	; 11
 96c:	80 64       	ori	r24, 0x40	; 64
 96e:	8b b9       	out	0x0b, r24	; 11
 970:	08 95       	ret

00000972 <get_distance>:
}

float get_distance()
{
 972:	cf 92       	push	r12
 974:	df 92       	push	r13
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
	double sum = 0;
	for (int i = 1; i <= HC_SR04_NUM_ITERATIONS; i++) {
 97e:	c1 e0       	ldi	r28, 0x01	; 1
 980:	d0 e0       	ldi	r29, 0x00	; 0
	PORTD |= (1 << PD6);
}

float get_distance()
{
	double sum = 0;
 982:	c1 2c       	mov	r12, r1
 984:	d1 2c       	mov	r13, r1
 986:	76 01       	movw	r14, r12
	for (int i = 1; i <= HC_SR04_NUM_ITERATIONS; i++) {
 988:	54 c0       	rjmp	.+168    	; 0xa32 <get_distance+0xc0>
		flag = 0;
 98a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <flag+0x1>
 98e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <flag>
		
		//Reset Trigger
		PORTA &= ~(1 << PA2);
 992:	82 b1       	in	r24, 0x02	; 2
 994:	8b 7f       	andi	r24, 0xFB	; 251
 996:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 998:	28 e1       	ldi	r18, 0x18	; 24
 99a:	2a 95       	dec	r18
 99c:	f1 f7       	brne	.-4      	; 0x99a <get_distance+0x28>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <get_distance+0x2e>
		_delay_us(5);

		//Trimite semnal catre Trigger
		PORTA |= (1 << PA2);
 9a0:	82 b1       	in	r24, 0x02	; 2
 9a2:	84 60       	ori	r24, 0x04	; 4
 9a4:	82 b9       	out	0x02, r24	; 2
 9a6:	86 e3       	ldi	r24, 0x36	; 54
 9a8:	8a 95       	dec	r24
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <get_distance+0x36>
 9ac:	00 00       	nop
		_delay_us(11);
		PORTA &= ~(1 << PA2);
 9ae:	82 b1       	in	r24, 0x02	; 2
 9b0:	8b 7f       	andi	r24, 0xFB	; 251
 9b2:	82 b9       	out	0x02, r24	; 2
		
		//Asteapta pentru semnalul de la Echo
		while(flag == 0 && count <= 5);
 9b4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <flag>
 9b8:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <flag+0x1>
 9bc:	89 2b       	or	r24, r25
 9be:	31 f4       	brne	.+12     	; 0x9cc <get_distance+0x5a>
 9c0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <count>
 9c4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <count+0x1>
 9c8:	06 97       	sbiw	r24, 0x06	; 6
 9ca:	a4 f3       	brlt	.-24     	; 0x9b4 <get_distance+0x42>
		
		sum = sum + (((int)saved_tcnt0 + 255 * saved_count) * 16.0) * 0.014;
 9cc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <saved_count>
 9d0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <saved_count+0x1>
 9d4:	2f ef       	ldi	r18, 0xFF	; 255
 9d6:	28 9f       	mul	r18, r24
 9d8:	b0 01       	movw	r22, r0
 9da:	29 9f       	mul	r18, r25
 9dc:	70 0d       	add	r23, r0
 9de:	11 24       	eor	r1, r1
 9e0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <saved_tcnt0>
 9e4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <saved_tcnt0+0x1>
 9e8:	68 0f       	add	r22, r24
 9ea:	79 1f       	adc	r23, r25
 9ec:	07 2e       	mov	r0, r23
 9ee:	00 0c       	add	r0, r0
 9f0:	88 0b       	sbc	r24, r24
 9f2:	99 0b       	sbc	r25, r25
 9f4:	4b d1       	rcall	.+662    	; 0xc8c <__floatsisf>
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	40 e8       	ldi	r20, 0x80	; 128
 9fc:	51 e4       	ldi	r21, 0x41	; 65
 9fe:	fa d1       	rcall	.+1012   	; 0xdf4 <__mulsf3>
 a00:	22 e4       	ldi	r18, 0x42	; 66
 a02:	30 e6       	ldi	r19, 0x60	; 96
 a04:	45 e6       	ldi	r20, 0x65	; 101
 a06:	5c e3       	ldi	r21, 0x3C	; 60
 a08:	f5 d1       	rcall	.+1002   	; 0xdf4 <__mulsf3>
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	c7 01       	movw	r24, r14
 a10:	b6 01       	movw	r22, r12
 a12:	d2 d0       	rcall	.+420    	; 0xbb8 <__addsf3>
 a14:	6b 01       	movw	r12, r22
 a16:	7c 01       	movw	r14, r24
		
		if (i < HC_SR04_NUM_ITERATIONS)
 a18:	1c 16       	cp	r1, r28
 a1a:	1d 06       	cpc	r1, r29
 a1c:	4c f0       	brlt	.+18     	; 0xa30 <get_distance+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a1e:	9f ef       	ldi	r25, 0xFF	; 255
 a20:	2f e5       	ldi	r18, 0x5F	; 95
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	91 50       	subi	r25, 0x01	; 1
 a26:	20 40       	sbci	r18, 0x00	; 0
 a28:	80 40       	sbci	r24, 0x00	; 0
 a2a:	e1 f7       	brne	.-8      	; 0xa24 <get_distance+0xb2>
 a2c:	00 c0       	rjmp	.+0      	; 0xa2e <get_distance+0xbc>
 a2e:	00 00       	nop
}

float get_distance()
{
	double sum = 0;
	for (int i = 1; i <= HC_SR04_NUM_ITERATIONS; i++) {
 a30:	21 96       	adiw	r28, 0x01	; 1
 a32:	c2 30       	cpi	r28, 0x02	; 2
 a34:	d1 05       	cpc	r29, r1
 a36:	0c f4       	brge	.+2      	; 0xa3a <get_distance+0xc8>
 a38:	a8 cf       	rjmp	.-176    	; 0x98a <get_distance+0x18>
		if (i < HC_SR04_NUM_ITERATIONS)
		_delay_ms(75);
	}

	return sum / HC_SR04_NUM_ITERATIONS;
}
 a3a:	c7 01       	movw	r24, r14
 a3c:	b6 01       	movw	r22, r12
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	ff 90       	pop	r15
 a44:	ef 90       	pop	r14
 a46:	df 90       	pop	r13
 a48:	cf 90       	pop	r12
 a4a:	08 95       	ret

00000a4c <initializare_wifi>:


void initializare_wifi()
{
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
	
	sei();
 a50:	78 94       	sei
	
	USART0_print("AT+CWMODE=3\r\n");
 a52:	8a e5       	ldi	r24, 0x5A	; 90
 a54:	91 e0       	ldi	r25, 0x01	; 1
 a56:	2f dc       	rcall	.-1954   	; 0x2b6 <USART0_print>
 a58:	2f ef       	ldi	r18, 0xFF	; 255
 a5a:	3f e7       	ldi	r19, 0x7F	; 127
 a5c:	84 e0       	ldi	r24, 0x04	; 4
 a5e:	21 50       	subi	r18, 0x01	; 1
 a60:	30 40       	sbci	r19, 0x00	; 0
 a62:	80 40       	sbci	r24, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <initializare_wifi+0x12>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <initializare_wifi+0x1c>
 a68:	00 00       	nop
	_delay_ms(100);
	
	USART0_print("AT+CIPMODE=0\r\n");
 a6a:	88 e6       	ldi	r24, 0x68	; 104
 a6c:	91 e0       	ldi	r25, 0x01	; 1
 a6e:	23 dc       	rcall	.-1978   	; 0x2b6 <USART0_print>
 a70:	9f ef       	ldi	r25, 0xFF	; 255
 a72:	ef e7       	ldi	r30, 0x7F	; 127
 a74:	f4 e0       	ldi	r31, 0x04	; 4
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	e0 40       	sbci	r30, 0x00	; 0
 a7a:	f0 40       	sbci	r31, 0x00	; 0
 a7c:	e1 f7       	brne	.-8      	; 0xa76 <initializare_wifi+0x2a>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <initializare_wifi+0x34>
 a80:	00 00       	nop
	_delay_ms(100);
	
	USART0_print("AT+CIPMUX=1\r\n");
 a82:	87 e7       	ldi	r24, 0x77	; 119
 a84:	91 e0       	ldi	r25, 0x01	; 1
 a86:	17 dc       	rcall	.-2002   	; 0x2b6 <USART0_print>
 a88:	2f ef       	ldi	r18, 0xFF	; 255
 a8a:	3f e7       	ldi	r19, 0x7F	; 127
 a8c:	84 e0       	ldi	r24, 0x04	; 4
 a8e:	21 50       	subi	r18, 0x01	; 1
 a90:	30 40       	sbci	r19, 0x00	; 0
 a92:	80 40       	sbci	r24, 0x00	; 0
 a94:	e1 f7       	brne	.-8      	; 0xa8e <initializare_wifi+0x42>
 a96:	00 c0       	rjmp	.+0      	; 0xa98 <initializare_wifi+0x4c>
	_delay_ms(100);
	
	USART0_print("AT+CWJAP=\"Galaxy\",\"123456789\"\r\n");
 a98:	00 00       	nop
 a9a:	85 e8       	ldi	r24, 0x85	; 133
 a9c:	91 e0       	ldi	r25, 0x01	; 1
 a9e:	0b dc       	rcall	.-2026   	; 0x2b6 <USART0_print>
 aa0:	9f ef       	ldi	r25, 0xFF	; 255
 aa2:	ef e7       	ldi	r30, 0x7F	; 127
 aa4:	f6 e0       	ldi	r31, 0x06	; 6
 aa6:	21 e0       	ldi	r18, 0x01	; 1
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	e0 40       	sbci	r30, 0x00	; 0
 aac:	f0 40       	sbci	r31, 0x00	; 0
 aae:	20 40       	sbci	r18, 0x00	; 0
 ab0:	d9 f7       	brne	.-10     	; 0xaa8 <initializare_wifi+0x5c>
 ab2:	00 c0       	rjmp	.+0      	; 0xab4 <initializare_wifi+0x68>
	_delay_ms(7000);
	
	USART0_print("AT+CIPSERVER=1,101\r\n");
 ab4:	00 00       	nop
 ab6:	85 ea       	ldi	r24, 0xA5	; 165
 ab8:	91 e0       	ldi	r25, 0x01	; 1
 aba:	fd db       	rcall	.-2054   	; 0x2b6 <USART0_print>
 abc:	3f ef       	ldi	r19, 0xFF	; 255
 abe:	8f e7       	ldi	r24, 0x7F	; 127
 ac0:	94 e0       	ldi	r25, 0x04	; 4
 ac2:	31 50       	subi	r19, 0x01	; 1
 ac4:	80 40       	sbci	r24, 0x00	; 0
 ac6:	90 40       	sbci	r25, 0x00	; 0
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <initializare_wifi+0x76>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <initializare_wifi+0x80>
 acc:	00 00       	nop
	_delay_ms(100);
	
	index_buffer=0;
 ace:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <index_buffer+0x1>
 ad2:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <index_buffer>
	USART0_print("AT+CIPSTA?\r\n");
 ad6:	8a eb       	ldi	r24, 0xBA	; 186
 ad8:	91 e0       	ldi	r25, 0x01	; 1
 ada:	ed db       	rcall	.-2086   	; 0x2b6 <USART0_print>
 adc:	ef ef       	ldi	r30, 0xFF	; 255
 ade:	ff ef       	ldi	r31, 0xFF	; 255
 ae0:	26 e8       	ldi	r18, 0x86	; 134
 ae2:	e1 50       	subi	r30, 0x01	; 1
 ae4:	f0 40       	sbci	r31, 0x00	; 0
 ae6:	20 40       	sbci	r18, 0x00	; 0
 ae8:	e1 f7       	brne	.-8      	; 0xae2 <initializare_wifi+0x96>
 aea:	00 c0       	rjmp	.+0      	; 0xaec <initializare_wifi+0xa0>
	_delay_ms(3000);
	
	char *adresa_ip = strchr(rx_buffer, '"');
 aec:	00 00       	nop
 aee:	62 e2       	ldi	r22, 0x22	; 34
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	88 ed       	ldi	r24, 0xD8	; 216
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	e1 d1       	rcall	.+962    	; 0xeba <strchr>
	if (adresa_ip)
 af8:	ec 01       	movw	r28, r24
 afa:	89 2b       	or	r24, r25
	{
		adresa_ip += 1;
		//cauta adresa caracterului " cand acesta apare prima data in sir
		char *finish = strchr(adresa_ip, '"');
 afc:	39 f0       	breq	.+14     	; 0xb0c <initializare_wifi+0xc0>
 afe:	21 96       	adiw	r28, 0x01	; 1
 b00:	62 e2       	ldi	r22, 0x22	; 34
 b02:	70 e0       	ldi	r23, 0x00	; 0
		int pozitie = finish-adresa_ip;
		adresa_ip[pozitie]='\0';
 b04:	ce 01       	movw	r24, r28
 b06:	d9 d1       	rcall	.+946    	; 0xeba <strchr>
		
	}
	LCD_Clear();
 b08:	fc 01       	movw	r30, r24
 b0a:	10 82       	st	Z, r1
	LCD_send_string(adresa_ip);
 b0c:	6c db       	rcall	.-2344   	; 0x1e6 <LCD_Clear>
 b0e:	ce 01       	movw	r24, r28
 b10:	3b db       	rcall	.-2442   	; 0x188 <LCD_send_string>
	
	cli();
 b12:	f8 94       	cli

}
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	08 95       	ret

00000b1a <main>:

int main()
{
	
	
	USART0_init();
 b1a:	b9 db       	rcall	.-2190   	; 0x28e <USART0_init>
	timer0_init();
 b1c:	6f db       	rcall	.-2338   	; 0x1fc <timer0_init>
	timer1_init();
 b1e:	77 db       	rcall	.-2322   	; 0x20e <timer1_init>
	timer2_init();
 b20:	89 db       	rcall	.-2286   	; 0x234 <timer2_init>
	timer3_init();
 b22:	96 db       	rcall	.-2260   	; 0x250 <timer3_init>
	initializare_LCD();
 b24:	46 db       	rcall	.-2420   	; 0x1b2 <initializare_LCD>
 b26:	0a df       	rcall	.-492    	; 0x93c <initializare_motoare>
	
	initializare_motoare();
 b28:	10 df       	rcall	.-480    	; 0x94a <initializare_leduri>
 b2a:	1c df       	rcall	.-456    	; 0x964 <initializare_buzzer>
	initializare_leduri();
 b2c:	2f ef       	ldi	r18, 0xFF	; 255
 b2e:	8f ef       	ldi	r24, 0xFF	; 255
	initializare_buzzer();
 b30:	9c e2       	ldi	r25, 0x2C	; 44
 b32:	21 50       	subi	r18, 0x01	; 1
 b34:	80 40       	sbci	r24, 0x00	; 0
 b36:	90 40       	sbci	r25, 0x00	; 0
 b38:	e1 f7       	brne	.-8      	; 0xb32 <main+0x18>
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <main+0x22>
 b3c:	00 00       	nop
 b3e:	86 df       	rcall	.-244    	; 0xa4c <initializare_wifi>
 b40:	e9 de       	rcall	.-558    	; 0x914 <initializare_HCSR04>
	
	_delay_ms(1000);
	initializare_wifi();
 b42:	78 94       	sei
 b44:	2f ef       	ldi	r18, 0xFF	; 255
	initializare_HCSR04();
 b46:	8f e7       	ldi	r24, 0x7F	; 127
	sei();
 b48:	94 e0       	ldi	r25, 0x04	; 4
 b4a:	21 50       	subi	r18, 0x01	; 1
 b4c:	80 40       	sbci	r24, 0x00	; 0
 b4e:	90 40       	sbci	r25, 0x00	; 0
 b50:	e1 f7       	brne	.-8      	; 0xb4a <main+0x30>
 b52:	00 c0       	rjmp	.+0      	; 0xb54 <main+0x3a>
 b54:	00 00       	nop
 b56:	0d df       	rcall	.-486    	; 0x972 <get_distance>
 b58:	6b 01       	movw	r12, r22
	while (1)
	{
		_delay_ms(100);
		float dist = get_distance();
 b5a:	7c 01       	movw	r14, r24
 b5c:	20 e0       	ldi	r18, 0x00	; 0
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	a9 01       	movw	r20, r18
		
		if (dist > 0 && dist < 20){
 b62:	44 d1       	rcall	.+648    	; 0xdec <__gesf2>
 b64:	18 16       	cp	r1, r24
 b66:	bc f4       	brge	.+46     	; 0xb96 <main+0x7c>
 b68:	20 e0       	ldi	r18, 0x00	; 0
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	40 ea       	ldi	r20, 0xA0	; 160
 b6e:	51 e4       	ldi	r21, 0x41	; 65
 b70:	c7 01       	movw	r24, r14
 b72:	b6 01       	movw	r22, r12
 b74:	85 d0       	rcall	.+266    	; 0xc80 <__cmpsf2>
 b76:	88 23       	and	r24, r24
 b78:	74 f4       	brge	.+28     	; 0xb96 <main+0x7c>
 b7a:	85 b1       	in	r24, 0x05	; 5
 b7c:	8e 7f       	andi	r24, 0xFE	; 254
 b7e:	85 b9       	out	0x05, r24	; 5
 b80:	85 b1       	in	r24, 0x05	; 5
			
			PORTB &= ~(1 << PB0);
 b82:	8d 7f       	andi	r24, 0xFD	; 253
 b84:	85 b9       	out	0x05, r24	; 5
 b86:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			PORTB &= ~(1 << PB1);
 b8a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1A=0;
 b8e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 b92:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			OCR1B=0;
 b96:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <date_primite>
 b9a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <date_primite+0x1>
			
			
		}
		
		
		if (date_primite == 1)
 b9e:	01 97       	sbiw	r24, 0x01	; 1
 ba0:	89 f6       	brne	.-94     	; 0xb44 <main+0x2a>
 ba2:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <index_buffer+0x1>
 ba6:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <index_buffer>
		{
			index_buffer=0;
 baa:	91 db       	rcall	.-2270   	; 0x2ce <executare_comanda>
 bac:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <date_primite+0x1>
			executare_comanda();
 bb0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <date_primite>
			
			date_primite = 0;
 bb4:	c7 cf       	rjmp	.-114    	; 0xb44 <main+0x2a>

00000bb6 <__subsf3>:
 bb6:	50 58       	subi	r21, 0x80	; 128

00000bb8 <__addsf3>:
 bb8:	bb 27       	eor	r27, r27
 bba:	aa 27       	eor	r26, r26
 bbc:	0e d0       	rcall	.+28     	; 0xbda <__addsf3x>
 bbe:	dc c0       	rjmp	.+440    	; 0xd78 <__fp_round>
 bc0:	cd d0       	rcall	.+410    	; 0xd5c <__fp_pscA>
 bc2:	30 f0       	brcs	.+12     	; 0xbd0 <__addsf3+0x18>
 bc4:	d2 d0       	rcall	.+420    	; 0xd6a <__fp_pscB>
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__addsf3+0x18>
 bc8:	31 f4       	brne	.+12     	; 0xbd6 <__addsf3+0x1e>
 bca:	9f 3f       	cpi	r25, 0xFF	; 255
 bcc:	11 f4       	brne	.+4      	; 0xbd2 <__addsf3+0x1a>
 bce:	1e f4       	brtc	.+6      	; 0xbd6 <__addsf3+0x1e>
 bd0:	c2 c0       	rjmp	.+388    	; 0xd56 <__fp_nan>
 bd2:	0e f4       	brtc	.+2      	; 0xbd6 <__addsf3+0x1e>
 bd4:	e0 95       	com	r30
 bd6:	e7 fb       	bst	r30, 7
 bd8:	b8 c0       	rjmp	.+368    	; 0xd4a <__fp_inf>

00000bda <__addsf3x>:
 bda:	e9 2f       	mov	r30, r25
 bdc:	de d0       	rcall	.+444    	; 0xd9a <__fp_split3>
 bde:	80 f3       	brcs	.-32     	; 0xbc0 <__addsf3+0x8>
 be0:	ba 17       	cp	r27, r26
 be2:	62 07       	cpc	r22, r18
 be4:	73 07       	cpc	r23, r19
 be6:	84 07       	cpc	r24, r20
 be8:	95 07       	cpc	r25, r21
 bea:	18 f0       	brcs	.+6      	; 0xbf2 <__addsf3x+0x18>
 bec:	71 f4       	brne	.+28     	; 0xc0a <__addsf3x+0x30>
 bee:	9e f5       	brtc	.+102    	; 0xc56 <__addsf3x+0x7c>
 bf0:	f6 c0       	rjmp	.+492    	; 0xdde <__fp_zero>
 bf2:	0e f4       	brtc	.+2      	; 0xbf6 <__addsf3x+0x1c>
 bf4:	e0 95       	com	r30
 bf6:	0b 2e       	mov	r0, r27
 bf8:	ba 2f       	mov	r27, r26
 bfa:	a0 2d       	mov	r26, r0
 bfc:	0b 01       	movw	r0, r22
 bfe:	b9 01       	movw	r22, r18
 c00:	90 01       	movw	r18, r0
 c02:	0c 01       	movw	r0, r24
 c04:	ca 01       	movw	r24, r20
 c06:	a0 01       	movw	r20, r0
 c08:	11 24       	eor	r1, r1
 c0a:	ff 27       	eor	r31, r31
 c0c:	59 1b       	sub	r21, r25
 c0e:	99 f0       	breq	.+38     	; 0xc36 <__addsf3x+0x5c>
 c10:	59 3f       	cpi	r21, 0xF9	; 249
 c12:	50 f4       	brcc	.+20     	; 0xc28 <__addsf3x+0x4e>
 c14:	50 3e       	cpi	r21, 0xE0	; 224
 c16:	68 f1       	brcs	.+90     	; 0xc72 <__addsf3x+0x98>
 c18:	1a 16       	cp	r1, r26
 c1a:	f0 40       	sbci	r31, 0x00	; 0
 c1c:	a2 2f       	mov	r26, r18
 c1e:	23 2f       	mov	r18, r19
 c20:	34 2f       	mov	r19, r20
 c22:	44 27       	eor	r20, r20
 c24:	58 5f       	subi	r21, 0xF8	; 248
 c26:	f3 cf       	rjmp	.-26     	; 0xc0e <__addsf3x+0x34>
 c28:	46 95       	lsr	r20
 c2a:	37 95       	ror	r19
 c2c:	27 95       	ror	r18
 c2e:	a7 95       	ror	r26
 c30:	f0 40       	sbci	r31, 0x00	; 0
 c32:	53 95       	inc	r21
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__addsf3x+0x4e>
 c36:	7e f4       	brtc	.+30     	; 0xc56 <__addsf3x+0x7c>
 c38:	1f 16       	cp	r1, r31
 c3a:	ba 0b       	sbc	r27, r26
 c3c:	62 0b       	sbc	r22, r18
 c3e:	73 0b       	sbc	r23, r19
 c40:	84 0b       	sbc	r24, r20
 c42:	ba f0       	brmi	.+46     	; 0xc72 <__addsf3x+0x98>
 c44:	91 50       	subi	r25, 0x01	; 1
 c46:	a1 f0       	breq	.+40     	; 0xc70 <__addsf3x+0x96>
 c48:	ff 0f       	add	r31, r31
 c4a:	bb 1f       	adc	r27, r27
 c4c:	66 1f       	adc	r22, r22
 c4e:	77 1f       	adc	r23, r23
 c50:	88 1f       	adc	r24, r24
 c52:	c2 f7       	brpl	.-16     	; 0xc44 <__addsf3x+0x6a>
 c54:	0e c0       	rjmp	.+28     	; 0xc72 <__addsf3x+0x98>
 c56:	ba 0f       	add	r27, r26
 c58:	62 1f       	adc	r22, r18
 c5a:	73 1f       	adc	r23, r19
 c5c:	84 1f       	adc	r24, r20
 c5e:	48 f4       	brcc	.+18     	; 0xc72 <__addsf3x+0x98>
 c60:	87 95       	ror	r24
 c62:	77 95       	ror	r23
 c64:	67 95       	ror	r22
 c66:	b7 95       	ror	r27
 c68:	f7 95       	ror	r31
 c6a:	9e 3f       	cpi	r25, 0xFE	; 254
 c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0x96>
 c6e:	b3 cf       	rjmp	.-154    	; 0xbd6 <__addsf3+0x1e>
 c70:	93 95       	inc	r25
 c72:	88 0f       	add	r24, r24
 c74:	08 f0       	brcs	.+2      	; 0xc78 <__addsf3x+0x9e>
 c76:	99 27       	eor	r25, r25
 c78:	ee 0f       	add	r30, r30
 c7a:	97 95       	ror	r25
 c7c:	87 95       	ror	r24
 c7e:	08 95       	ret

00000c80 <__cmpsf2>:
 c80:	40 d0       	rcall	.+128    	; 0xd02 <__fp_cmp>
 c82:	08 f4       	brcc	.+2      	; 0xc86 <__cmpsf2+0x6>
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	08 95       	ret

00000c88 <__floatunsisf>:
 c88:	e8 94       	clt
 c8a:	09 c0       	rjmp	.+18     	; 0xc9e <__floatsisf+0x12>

00000c8c <__floatsisf>:
 c8c:	97 fb       	bst	r25, 7
 c8e:	3e f4       	brtc	.+14     	; 0xc9e <__floatsisf+0x12>
 c90:	90 95       	com	r25
 c92:	80 95       	com	r24
 c94:	70 95       	com	r23
 c96:	61 95       	neg	r22
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	99 23       	and	r25, r25
 ca0:	a9 f0       	breq	.+42     	; 0xccc <__floatsisf+0x40>
 ca2:	f9 2f       	mov	r31, r25
 ca4:	96 e9       	ldi	r25, 0x96	; 150
 ca6:	bb 27       	eor	r27, r27
 ca8:	93 95       	inc	r25
 caa:	f6 95       	lsr	r31
 cac:	87 95       	ror	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	b7 95       	ror	r27
 cb4:	f1 11       	cpse	r31, r1
 cb6:	f8 cf       	rjmp	.-16     	; 0xca8 <__floatsisf+0x1c>
 cb8:	fa f4       	brpl	.+62     	; 0xcf8 <__floatsisf+0x6c>
 cba:	bb 0f       	add	r27, r27
 cbc:	11 f4       	brne	.+4      	; 0xcc2 <__floatsisf+0x36>
 cbe:	60 ff       	sbrs	r22, 0
 cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <__floatsisf+0x6c>
 cc2:	6f 5f       	subi	r22, 0xFF	; 255
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	16 c0       	rjmp	.+44     	; 0xcf8 <__floatsisf+0x6c>
 ccc:	88 23       	and	r24, r24
 cce:	11 f0       	breq	.+4      	; 0xcd4 <__floatsisf+0x48>
 cd0:	96 e9       	ldi	r25, 0x96	; 150
 cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <__floatsisf+0x6a>
 cd4:	77 23       	and	r23, r23
 cd6:	21 f0       	breq	.+8      	; 0xce0 <__floatsisf+0x54>
 cd8:	9e e8       	ldi	r25, 0x8E	; 142
 cda:	87 2f       	mov	r24, r23
 cdc:	76 2f       	mov	r23, r22
 cde:	05 c0       	rjmp	.+10     	; 0xcea <__floatsisf+0x5e>
 ce0:	66 23       	and	r22, r22
 ce2:	71 f0       	breq	.+28     	; 0xd00 <__floatsisf+0x74>
 ce4:	96 e8       	ldi	r25, 0x86	; 134
 ce6:	86 2f       	mov	r24, r22
 ce8:	70 e0       	ldi	r23, 0x00	; 0
 cea:	60 e0       	ldi	r22, 0x00	; 0
 cec:	2a f0       	brmi	.+10     	; 0xcf8 <__floatsisf+0x6c>
 cee:	9a 95       	dec	r25
 cf0:	66 0f       	add	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	da f7       	brpl	.-10     	; 0xcee <__floatsisf+0x62>
 cf8:	88 0f       	add	r24, r24
 cfa:	96 95       	lsr	r25
 cfc:	87 95       	ror	r24
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__fp_cmp>:
 d02:	99 0f       	add	r25, r25
 d04:	00 08       	sbc	r0, r0
 d06:	55 0f       	add	r21, r21
 d08:	aa 0b       	sbc	r26, r26
 d0a:	e0 e8       	ldi	r30, 0x80	; 128
 d0c:	fe ef       	ldi	r31, 0xFE	; 254
 d0e:	16 16       	cp	r1, r22
 d10:	17 06       	cpc	r1, r23
 d12:	e8 07       	cpc	r30, r24
 d14:	f9 07       	cpc	r31, r25
 d16:	c0 f0       	brcs	.+48     	; 0xd48 <__fp_cmp+0x46>
 d18:	12 16       	cp	r1, r18
 d1a:	13 06       	cpc	r1, r19
 d1c:	e4 07       	cpc	r30, r20
 d1e:	f5 07       	cpc	r31, r21
 d20:	98 f0       	brcs	.+38     	; 0xd48 <__fp_cmp+0x46>
 d22:	62 1b       	sub	r22, r18
 d24:	73 0b       	sbc	r23, r19
 d26:	84 0b       	sbc	r24, r20
 d28:	95 0b       	sbc	r25, r21
 d2a:	39 f4       	brne	.+14     	; 0xd3a <__fp_cmp+0x38>
 d2c:	0a 26       	eor	r0, r26
 d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_cmp+0x46>
 d30:	23 2b       	or	r18, r19
 d32:	24 2b       	or	r18, r20
 d34:	25 2b       	or	r18, r21
 d36:	21 f4       	brne	.+8      	; 0xd40 <__fp_cmp+0x3e>
 d38:	08 95       	ret
 d3a:	0a 26       	eor	r0, r26
 d3c:	09 f4       	brne	.+2      	; 0xd40 <__fp_cmp+0x3e>
 d3e:	a1 40       	sbci	r26, 0x01	; 1
 d40:	a6 95       	lsr	r26
 d42:	8f ef       	ldi	r24, 0xFF	; 255
 d44:	81 1d       	adc	r24, r1
 d46:	81 1d       	adc	r24, r1
 d48:	08 95       	ret

00000d4a <__fp_inf>:
 d4a:	97 f9       	bld	r25, 7
 d4c:	9f 67       	ori	r25, 0x7F	; 127
 d4e:	80 e8       	ldi	r24, 0x80	; 128
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	08 95       	ret

00000d56 <__fp_nan>:
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	80 ec       	ldi	r24, 0xC0	; 192
 d5a:	08 95       	ret

00000d5c <__fp_pscA>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	09 06       	cpc	r0, r25
 d68:	08 95       	ret

00000d6a <__fp_pscB>:
 d6a:	00 24       	eor	r0, r0
 d6c:	0a 94       	dec	r0
 d6e:	12 16       	cp	r1, r18
 d70:	13 06       	cpc	r1, r19
 d72:	14 06       	cpc	r1, r20
 d74:	05 06       	cpc	r0, r21
 d76:	08 95       	ret

00000d78 <__fp_round>:
 d78:	09 2e       	mov	r0, r25
 d7a:	03 94       	inc	r0
 d7c:	00 0c       	add	r0, r0
 d7e:	11 f4       	brne	.+4      	; 0xd84 <__fp_round+0xc>
 d80:	88 23       	and	r24, r24
 d82:	52 f0       	brmi	.+20     	; 0xd98 <__fp_round+0x20>
 d84:	bb 0f       	add	r27, r27
 d86:	40 f4       	brcc	.+16     	; 0xd98 <__fp_round+0x20>
 d88:	bf 2b       	or	r27, r31
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__fp_round+0x18>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <__fp_round+0x20>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	08 95       	ret

00000d9a <__fp_split3>:
 d9a:	57 fd       	sbrc	r21, 7
 d9c:	90 58       	subi	r25, 0x80	; 128
 d9e:	44 0f       	add	r20, r20
 da0:	55 1f       	adc	r21, r21
 da2:	59 f0       	breq	.+22     	; 0xdba <__fp_splitA+0x10>
 da4:	5f 3f       	cpi	r21, 0xFF	; 255
 da6:	71 f0       	breq	.+28     	; 0xdc4 <__fp_splitA+0x1a>
 da8:	47 95       	ror	r20

00000daa <__fp_splitA>:
 daa:	88 0f       	add	r24, r24
 dac:	97 fb       	bst	r25, 7
 dae:	99 1f       	adc	r25, r25
 db0:	61 f0       	breq	.+24     	; 0xdca <__fp_splitA+0x20>
 db2:	9f 3f       	cpi	r25, 0xFF	; 255
 db4:	79 f0       	breq	.+30     	; 0xdd4 <__fp_splitA+0x2a>
 db6:	87 95       	ror	r24
 db8:	08 95       	ret
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	14 06       	cpc	r1, r20
 dc0:	55 1f       	adc	r21, r21
 dc2:	f2 cf       	rjmp	.-28     	; 0xda8 <__fp_split3+0xe>
 dc4:	46 95       	lsr	r20
 dc6:	f1 df       	rcall	.-30     	; 0xdaa <__fp_splitA>
 dc8:	08 c0       	rjmp	.+16     	; 0xdda <__fp_splitA+0x30>
 dca:	16 16       	cp	r1, r22
 dcc:	17 06       	cpc	r1, r23
 dce:	18 06       	cpc	r1, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	f1 cf       	rjmp	.-30     	; 0xdb6 <__fp_splitA+0xc>
 dd4:	86 95       	lsr	r24
 dd6:	71 05       	cpc	r23, r1
 dd8:	61 05       	cpc	r22, r1
 dda:	08 94       	sec
 ddc:	08 95       	ret

00000dde <__fp_zero>:
 dde:	e8 94       	clt

00000de0 <__fp_szero>:
 de0:	bb 27       	eor	r27, r27
 de2:	66 27       	eor	r22, r22
 de4:	77 27       	eor	r23, r23
 de6:	cb 01       	movw	r24, r22
 de8:	97 f9       	bld	r25, 7
 dea:	08 95       	ret

00000dec <__gesf2>:
 dec:	8a df       	rcall	.-236    	; 0xd02 <__fp_cmp>
 dee:	08 f4       	brcc	.+2      	; 0xdf2 <__gesf2+0x6>
 df0:	8f ef       	ldi	r24, 0xFF	; 255
 df2:	08 95       	ret

00000df4 <__mulsf3>:
 df4:	0b d0       	rcall	.+22     	; 0xe0c <__mulsf3x>
 df6:	c0 cf       	rjmp	.-128    	; 0xd78 <__fp_round>
 df8:	b1 df       	rcall	.-158    	; 0xd5c <__fp_pscA>
 dfa:	28 f0       	brcs	.+10     	; 0xe06 <__mulsf3+0x12>
 dfc:	b6 df       	rcall	.-148    	; 0xd6a <__fp_pscB>
 dfe:	18 f0       	brcs	.+6      	; 0xe06 <__mulsf3+0x12>
 e00:	95 23       	and	r25, r21
 e02:	09 f0       	breq	.+2      	; 0xe06 <__mulsf3+0x12>
 e04:	a2 cf       	rjmp	.-188    	; 0xd4a <__fp_inf>
 e06:	a7 cf       	rjmp	.-178    	; 0xd56 <__fp_nan>
 e08:	11 24       	eor	r1, r1
 e0a:	ea cf       	rjmp	.-44     	; 0xde0 <__fp_szero>

00000e0c <__mulsf3x>:
 e0c:	c6 df       	rcall	.-116    	; 0xd9a <__fp_split3>
 e0e:	a0 f3       	brcs	.-24     	; 0xdf8 <__mulsf3+0x4>

00000e10 <__mulsf3_pse>:
 e10:	95 9f       	mul	r25, r21
 e12:	d1 f3       	breq	.-12     	; 0xe08 <__mulsf3+0x14>
 e14:	95 0f       	add	r25, r21
 e16:	50 e0       	ldi	r21, 0x00	; 0
 e18:	55 1f       	adc	r21, r21
 e1a:	62 9f       	mul	r22, r18
 e1c:	f0 01       	movw	r30, r0
 e1e:	72 9f       	mul	r23, r18
 e20:	bb 27       	eor	r27, r27
 e22:	f0 0d       	add	r31, r0
 e24:	b1 1d       	adc	r27, r1
 e26:	63 9f       	mul	r22, r19
 e28:	aa 27       	eor	r26, r26
 e2a:	f0 0d       	add	r31, r0
 e2c:	b1 1d       	adc	r27, r1
 e2e:	aa 1f       	adc	r26, r26
 e30:	64 9f       	mul	r22, r20
 e32:	66 27       	eor	r22, r22
 e34:	b0 0d       	add	r27, r0
 e36:	a1 1d       	adc	r26, r1
 e38:	66 1f       	adc	r22, r22
 e3a:	82 9f       	mul	r24, r18
 e3c:	22 27       	eor	r18, r18
 e3e:	b0 0d       	add	r27, r0
 e40:	a1 1d       	adc	r26, r1
 e42:	62 1f       	adc	r22, r18
 e44:	73 9f       	mul	r23, r19
 e46:	b0 0d       	add	r27, r0
 e48:	a1 1d       	adc	r26, r1
 e4a:	62 1f       	adc	r22, r18
 e4c:	83 9f       	mul	r24, r19
 e4e:	a0 0d       	add	r26, r0
 e50:	61 1d       	adc	r22, r1
 e52:	22 1f       	adc	r18, r18
 e54:	74 9f       	mul	r23, r20
 e56:	33 27       	eor	r19, r19
 e58:	a0 0d       	add	r26, r0
 e5a:	61 1d       	adc	r22, r1
 e5c:	23 1f       	adc	r18, r19
 e5e:	84 9f       	mul	r24, r20
 e60:	60 0d       	add	r22, r0
 e62:	21 1d       	adc	r18, r1
 e64:	82 2f       	mov	r24, r18
 e66:	76 2f       	mov	r23, r22
 e68:	6a 2f       	mov	r22, r26
 e6a:	11 24       	eor	r1, r1
 e6c:	9f 57       	subi	r25, 0x7F	; 127
 e6e:	50 40       	sbci	r21, 0x00	; 0
 e70:	8a f0       	brmi	.+34     	; 0xe94 <__mulsf3_pse+0x84>
 e72:	e1 f0       	breq	.+56     	; 0xeac <__mulsf3_pse+0x9c>
 e74:	88 23       	and	r24, r24
 e76:	4a f0       	brmi	.+18     	; 0xe8a <__mulsf3_pse+0x7a>
 e78:	ee 0f       	add	r30, r30
 e7a:	ff 1f       	adc	r31, r31
 e7c:	bb 1f       	adc	r27, r27
 e7e:	66 1f       	adc	r22, r22
 e80:	77 1f       	adc	r23, r23
 e82:	88 1f       	adc	r24, r24
 e84:	91 50       	subi	r25, 0x01	; 1
 e86:	50 40       	sbci	r21, 0x00	; 0
 e88:	a9 f7       	brne	.-22     	; 0xe74 <__mulsf3_pse+0x64>
 e8a:	9e 3f       	cpi	r25, 0xFE	; 254
 e8c:	51 05       	cpc	r21, r1
 e8e:	70 f0       	brcs	.+28     	; 0xeac <__mulsf3_pse+0x9c>
 e90:	5c cf       	rjmp	.-328    	; 0xd4a <__fp_inf>
 e92:	a6 cf       	rjmp	.-180    	; 0xde0 <__fp_szero>
 e94:	5f 3f       	cpi	r21, 0xFF	; 255
 e96:	ec f3       	brlt	.-6      	; 0xe92 <__mulsf3_pse+0x82>
 e98:	98 3e       	cpi	r25, 0xE8	; 232
 e9a:	dc f3       	brlt	.-10     	; 0xe92 <__mulsf3_pse+0x82>
 e9c:	86 95       	lsr	r24
 e9e:	77 95       	ror	r23
 ea0:	67 95       	ror	r22
 ea2:	b7 95       	ror	r27
 ea4:	f7 95       	ror	r31
 ea6:	e7 95       	ror	r30
 ea8:	9f 5f       	subi	r25, 0xFF	; 255
 eaa:	c1 f7       	brne	.-16     	; 0xe9c <__mulsf3_pse+0x8c>
 eac:	fe 2b       	or	r31, r30
 eae:	88 0f       	add	r24, r24
 eb0:	91 1d       	adc	r25, r1
 eb2:	96 95       	lsr	r25
 eb4:	87 95       	ror	r24
 eb6:	97 f9       	bld	r25, 7
 eb8:	08 95       	ret

00000eba <strchr>:
 eba:	fc 01       	movw	r30, r24
 ebc:	81 91       	ld	r24, Z+
 ebe:	86 17       	cp	r24, r22
 ec0:	21 f0       	breq	.+8      	; 0xeca <strchr+0x10>
 ec2:	88 23       	and	r24, r24
 ec4:	d9 f7       	brne	.-10     	; 0xebc <strchr+0x2>
 ec6:	99 27       	eor	r25, r25
 ec8:	08 95       	ret
 eca:	31 97       	sbiw	r30, 0x01	; 1
 ecc:	cf 01       	movw	r24, r30
 ece:	08 95       	ret

00000ed0 <strstr>:
 ed0:	fb 01       	movw	r30, r22
 ed2:	51 91       	ld	r21, Z+
 ed4:	55 23       	and	r21, r21
 ed6:	a9 f0       	breq	.+42     	; 0xf02 <strstr+0x32>
 ed8:	bf 01       	movw	r22, r30
 eda:	dc 01       	movw	r26, r24
 edc:	4d 91       	ld	r20, X+
 ede:	45 17       	cp	r20, r21
 ee0:	41 11       	cpse	r20, r1
 ee2:	e1 f7       	brne	.-8      	; 0xedc <strstr+0xc>
 ee4:	59 f4       	brne	.+22     	; 0xefc <strstr+0x2c>
 ee6:	cd 01       	movw	r24, r26
 ee8:	01 90       	ld	r0, Z+
 eea:	00 20       	and	r0, r0
 eec:	49 f0       	breq	.+18     	; 0xf00 <strstr+0x30>
 eee:	4d 91       	ld	r20, X+
 ef0:	40 15       	cp	r20, r0
 ef2:	41 11       	cpse	r20, r1
 ef4:	c9 f3       	breq	.-14     	; 0xee8 <strstr+0x18>
 ef6:	fb 01       	movw	r30, r22
 ef8:	41 11       	cpse	r20, r1
 efa:	ef cf       	rjmp	.-34     	; 0xeda <strstr+0xa>
 efc:	81 e0       	ldi	r24, 0x01	; 1
 efe:	90 e0       	ldi	r25, 0x00	; 0
 f00:	01 97       	sbiw	r24, 0x01	; 1
 f02:	08 95       	ret

00000f04 <_exit>:
 f04:	f8 94       	cli

00000f06 <__stop_program>:
 f06:	ff cf       	rjmp	.-2      	; 0xf06 <__stop_program>
